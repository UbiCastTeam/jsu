class ChunkedUploader{constructor(e){jsu.onDOMLoad(this.init.bind(this,e))}init(e){const t=["inputSelector","formSelector","uploadURL","completeURL"],i={debugMode:null,headers:{},maxRetry:5,retryDelay:1e4,chunkSize:2e7,uploadIdFieldName:"upload_id",fileNameSuffix:"",onProgress:null,onRetry:null,onSuccess:null,onFailure:null};for(const i of t){if(!e[i])throw new Error('A mandatory argument is missing: "'+i+'".');this[i]=e[i]}for(const t in i)this[t]=void 0!==e[t]?e[t]:i[t];if(null===this.debugMode&&-1!==window.location.hash.indexOf("debug")&&(this.debugMode=!0),this.fileInput=document.querySelector(this.inputSelector),!this.fileInput)throw new Error('Cannot find element in the document: "'+this.inputSelector+'".');if(this.fileForm=document.querySelector(this.formSelector),!this.fileForm)throw new Error('Cannot find element in the document: "'+this.formSelector+'".');const s=this;this.fileForm.addEventListener("submit",function(e){s.log("Number of files:",s.fileInput.files.length),s.fileInput.files.length>0&&(e.preventDefault(),setTimeout(s.sendFile.bind(s),1))})}log(){this.debugMode&&console.log.apply(null,arguments)}setProgress(e){this.onProgress&&this.onProgress(e)}retry(e,t){let i;if(this.onRetry&&(i=this.onRetry(e)),void 0===i){const e=this;i=new Promise(function(t){e.log("Retrying in "+e.retryDelay+" ms..."),setTimeout(t,e.retryDelay)})}i.then(t)}uploadSuccess(){this.log("Submitting form..."),this.fileForm.submit(),this.onSuccess&&this.onSuccess(this.uploadId)}uploadFailure(e){this.fileInput.disabled=!1,this.onFailure&&this.onFailure(e)}sendFile(){this.setProgress(0),this.uploadIdInput=document.createElement("input"),this.uploadIdInput.setAttribute("type","hidden"),this.uploadIdInput.setAttribute("name",this.uploadIdFieldName),this.uploadIdInput.setAttribute("id",this.fileInput.id+"_"+this.uploadIdFieldName),this.fileInput.after(this.uploadIdInput),this.fileInput.disabled=!0,this.uploadId=null;const e=this.fileInput.files[0];if(this.fileName=e.name,this.fileNameSuffix){const e=this.fileName.lastIndexOf(".");this.fileName=e>0?this.fileName.substring(0,e)+this.fileNameSuffix+this.fileName.substring(e):"file"+this.fileNameSuffix+".tmp"}this.log("Number of chunk to send:",Math.ceil(e.size/this.chunkSize),this.chunkSize,e.size),this.sendNextChunk(e,0,0)}sendNextChunk(e,t,i){this.log("Sending chunk:","start:",t,"total size:",e.size,"retries:",i);const s=Math.min(t+this.chunkSize,e.size),o=new FormData;o.append("file",e.slice(t,s),this.fileName),o.append("retries",i),this.uploadId&&o.append("upload_id",this.uploadId);const l=(s-t)/e.size,n=Object.assign(this.headers,{"Content-Range":"bytes "+t+"-"+(s-1)+"/"+e.size});this.log("Content-Range",n["Content-Range"]);const u=this;jsu.httpRequest({method:"POST",url:this.uploadURL,headers:n,data:o,json:!0,progress:function(i){if(i.lengthComputable){let s=t/e.size;i.total&&(s+=l*(i.loaded/i.total)),s=Math.floor(95*s),u.log("Progress:",s,l,i.loaded,i.total),u.setProgress(s)}},callback:function(o,l){if(200==o.status&&l.upload_id){u.log("Chunk sent",l),u.uploadId=l.upload_id;const t=s;t>=e.size?u.completeUpload(e,0):u.sendNextChunk(e,t,0)}else u.log("Failed to send chunk:",l),i<u.maxRetry?u.retry(o,u.sendNextChunk.bind(u,e,t,i+1)):u.uploadFailure(jsu.translate("Failed to upload file:")+"\n"+l.error)}})}completeUpload(e,t){this.log("Calling complete:","expected size:",e.size,"retries:",t);const i=new FormData;i.append("upload_id",this.uploadId),i.append("expected_size",e.size),i.append("retries",t),this.uploadIdInput.value=this.uploadId,this.fileInput.value="";const s=this;jsu.httpRequest({method:"POST",url:this.completeURL,headers:this.headers,data:i,json:!0,callback:function(i,o){200==i.status?(s.log("Complete succeeded:",o),s.setProgress(100),s.uploadSuccess()):(s.log("Failed to call complete:",o),t<s.maxRetry?s.retry(i,s.completeUpload.bind(s,e,t+1)):s.uploadFailure(jsu.translate("Failed to complete file upload:")+"\n"+o.error))}})}}